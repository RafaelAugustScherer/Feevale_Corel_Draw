/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package com.mycompany.corel_draw;

import view.SelectFile;
import domain.Transform;
import domain.Filter;
import java.awt.image.BufferedImage;
import javax.swing.JOptionPane;
import types.Orientation;
import utilities.BufferedImageUtils;
import view.SaveFile;
import view.SelectOptions;
import domain.Mathematic_Erosion;

/**
 *
 * @author Rafael
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        
        this.inputImagePanel.addEventListener((java.awt.event.ActionEvent evt) -> {
            if (evt.getActionCommand().equals("IMAGE_SET")) {
                inputImageSizeLabel.setText(String.format("Tamanho da imagem original: %d x %d", this.inputImagePanel.image.getWidth(), this.inputImagePanel.image.getHeight()));
            }
        });
        
        this.outputImagePanel.addEventListener((java.awt.event.ActionEvent evt) -> {
            if (evt.getActionCommand().equals("IMAGE_SET")) {
                outputImageSizeLabel.setText(String.format("Tamanho da imagem nova: %d x %d", this.outputImagePanel.image.getWidth(), this.outputImagePanel.image.getHeight()));
            }
        });
 
         BufferedImage defaultImage = BufferedImageUtils.defaultImage();
         this.inputImagePanel.setImage(defaultImage);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        inputLabel = new javax.swing.JLabel();
        inputImagePanel = new com.mycompany.corel_draw.components.ImagePanel();
        outputLabel = new javax.swing.JLabel();
        outputImagePanel = new com.mycompany.corel_draw.components.ImagePanel();
        inputImageSizeLabel = new javax.swing.JLabel();
        outputImageSizeLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openImageItem = new javax.swing.JMenuItem();
        saveImageItem = new javax.swing.JMenuItem();
        AboutItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        GeometricTransformationMenu = new javax.swing.JMenu();
        translateMenuItem = new javax.swing.JMenuItem();
        rotateMenuItem = new javax.swing.JMenuItem();
        mirrorMenuItem = new javax.swing.JMenuItem();
        increaseMenuItem = new javax.swing.JMenuItem();
        decreaseMenuItem = new javax.swing.JMenuItem();
        filtersMenu = new javax.swing.JMenu();
        grayscaleMenuItem = new javax.swing.JMenuItem();
        lowPassMenuItem = new javax.swing.JMenuItem();
        highPassMenuItem = new javax.swing.JMenuItem();
        thresholdMenuItem = new javax.swing.JMenuItem();
        mathMorfologyMenu = new javax.swing.JMenu();
        dilatationMenuItem = new javax.swing.JMenuItem();
        erosionMenuItem = new javax.swing.JMenuItem();
        openingMenuItem = new javax.swing.JMenuItem();
        enclosingMenuItem = new javax.swing.JMenuItem();
        characteristicsExtractionMenu = new javax.swing.JMenu();
        challengeMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Corel Draw by Rafael Scherer");
        setMinimumSize(new java.awt.Dimension(1000, 1000));

        inputLabel.setText("Input");

        inputImagePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        inputImagePanel.setPreferredSize(new java.awt.Dimension(490, 350));

        javax.swing.GroupLayout inputImagePanelLayout = new javax.swing.GroupLayout(inputImagePanel);
        inputImagePanel.setLayout(inputImagePanelLayout);
        inputImagePanelLayout.setHorizontalGroup(
            inputImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 488, Short.MAX_VALUE)
        );
        inputImagePanelLayout.setVerticalGroup(
            inputImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );

        outputLabel.setText("Output");

        outputImagePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        outputImagePanel.setPreferredSize(new java.awt.Dimension(490, 350));

        javax.swing.GroupLayout outputImagePanelLayout = new javax.swing.GroupLayout(outputImagePanel);
        outputImagePanel.setLayout(outputImagePanelLayout);
        outputImagePanelLayout.setHorizontalGroup(
            outputImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        outputImagePanelLayout.setVerticalGroup(
            outputImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );

        inputImageSizeLabel.setText("Tamanho da imagem original: ");

        outputImageSizeLabel.setText("Tamanho da imagem nova: ");

        fileMenu.setMnemonic('f');
        fileMenu.setText("ARQUIVO");

        openImageItem.setMnemonic('o');
        openImageItem.setText("Abrir Imagem");
        openImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageItemActionPerformed(evt);
            }
        });
        fileMenu.add(openImageItem);

        saveImageItem.setMnemonic('s');
        saveImageItem.setText("Salvar Imagem");
        saveImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveImageItem);

        AboutItem.setMnemonic('a');
        AboutItem.setText("Sobre");
        fileMenu.add(AboutItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Sair");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        GeometricTransformationMenu.setMnemonic('e');
        GeometricTransformationMenu.setText("TRANSFORMAÇÕES GEOMÉTRICAS");

        translateMenuItem.setMnemonic('t');
        translateMenuItem.setText("Transladar");
        translateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateMenuItemActionPerformed(evt);
            }
        });
        GeometricTransformationMenu.add(translateMenuItem);

        rotateMenuItem.setMnemonic('y');
        rotateMenuItem.setText("Rotacionar");
        rotateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateMenuItemActionPerformed(evt);
            }
        });
        GeometricTransformationMenu.add(rotateMenuItem);

        mirrorMenuItem.setMnemonic('p');
        mirrorMenuItem.setText("Espelhar");
        mirrorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorMenuItemActionPerformed(evt);
            }
        });
        GeometricTransformationMenu.add(mirrorMenuItem);

        increaseMenuItem.setMnemonic('d');
        increaseMenuItem.setText("Aumentar");
        increaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseMenuItemActionPerformed(evt);
            }
        });
        GeometricTransformationMenu.add(increaseMenuItem);

        decreaseMenuItem.setMnemonic('d');
        decreaseMenuItem.setText("Diminuir");
        decreaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseMenuItemActionPerformed(evt);
            }
        });
        GeometricTransformationMenu.add(decreaseMenuItem);

        menuBar.add(GeometricTransformationMenu);

        filtersMenu.setMnemonic('h');
        filtersMenu.setText("FILTROS");

        grayscaleMenuItem.setMnemonic('c');
        grayscaleMenuItem.setText("Grayscale");
        grayscaleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayscaleMenuItemActionPerformed(evt);
            }
        });
        filtersMenu.add(grayscaleMenuItem);

        lowPassMenuItem.setMnemonic('a');
        lowPassMenuItem.setText("Passa Baixa");
        lowPassMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowPassMenuItemActionPerformed(evt);
            }
        });
        filtersMenu.add(lowPassMenuItem);

        highPassMenuItem.setMnemonic('a');
        highPassMenuItem.setText("Passa Alta");
        highPassMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highPassMenuItemActionPerformed(evt);
            }
        });
        filtersMenu.add(highPassMenuItem);

        thresholdMenuItem.setText("Threshold");
        thresholdMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdMenuItemActionPerformed(evt);
            }
        });
        filtersMenu.add(thresholdMenuItem);

        menuBar.add(filtersMenu);

        mathMorfologyMenu.setText("MORFOLOGIA MATEMÁTICA");

        dilatationMenuItem.setText("Dilatação");
        dilatationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dilatationMenuItemActionPerformed(evt);
            }
        });
        mathMorfologyMenu.add(dilatationMenuItem);

        erosionMenuItem.setText("Erosão");
        erosionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erosionMenuItemActionPerformed(evt);
            }
        });
        mathMorfologyMenu.add(erosionMenuItem);

        openingMenuItem.setText("Abertura");
        mathMorfologyMenu.add(openingMenuItem);

        enclosingMenuItem.setText("Fechamento");
        mathMorfologyMenu.add(enclosingMenuItem);

        menuBar.add(mathMorfologyMenu);

        characteristicsExtractionMenu.setText("EXTRAÇÃO DE CARACTERÍSTICAS");

        challengeMenuItem.setText("DESAFIO");
        characteristicsExtractionMenu.add(challengeMenuItem);

        menuBar.add(characteristicsExtractionMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(inputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 468, Short.MAX_VALUE)
                .addComponent(outputLabel)
                .addGap(246, 246, 246))
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(inputImageSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(outputImageSizeLabel)
                .addGap(176, 176, 176))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputLabel)
                    .addComponent(outputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(inputImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputImageSizeLabel)
                    .addComponent(outputImageSizeLabel))
                .addContainerGap(430, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageItemActionPerformed
        SelectFile selectFile = new SelectFile();
        
        selectFile.addEventListener((java.awt.event.ActionEvent evt1) -> {
            inputImagePanel.setImageFromFile(selectFile.selectedFile);
        });
        selectFile.setVisible(true);
    }//GEN-LAST:event_openImageItemActionPerformed

    private void decreaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            BufferedImage result = Transform.reduce(inputImagePanel.image, 2);
            outputImagePanel.setImage(result);
        }
    }//GEN-LAST:event_decreaseMenuItemActionPerformed

    private void translateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            SelectOptions optionsSelector = new SelectOptions("Transladar");
            
            optionsSelector.xPanel.setVisible(true);
            optionsSelector.yPanel.setVisible(true);
            
            optionsSelector.addEventListener((java.awt.event.ActionEvent evt1) -> {
                int[] desiredPosition = {optionsSelector.xSlider.getValue(), optionsSelector.ySlider.getValue()};
                BufferedImage result = Transform.translate(inputImagePanel.image, desiredPosition);
            
                outputImagePanel.setImage(result);
            });
            optionsSelector.setVisible(true);
        }
    }//GEN-LAST:event_translateMenuItemActionPerformed

    private void rotateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            SelectOptions optionsSelector = new SelectOptions("Rotacionar");
            
            optionsSelector.degreesPanel.setVisible(true);
            
            optionsSelector.addEventListener((java.awt.event.ActionEvent evt1) -> {
                BufferedImage result = Transform.rotate(inputImagePanel.image, optionsSelector.degreesSlider.getValue());
                outputImagePanel.setImage(result);
            });
            optionsSelector.setVisible(true);
        }
    }//GEN-LAST:event_rotateMenuItemActionPerformed

    private void saveImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageItemActionPerformed
        if (outputImagePanel.image != null) {
            SaveFile saveFile = new SaveFile(outputImagePanel.image);
            saveFile.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Realize uma operação antes de salvar a imagem.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveImageItemActionPerformed

    private void mirrorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            SelectOptions optionsSelector = new SelectOptions("Espelhar");
            
            optionsSelector.choicesPanel.setVisible(true);
            optionsSelector.choicesLabel.setText("Orientação:");
            
            for (Orientation orientation: Orientation.values()) {
                optionsSelector.choices.addItem(orientation.label);
            }

            optionsSelector.addEventListener((java.awt.event.ActionEvent evt1) -> {
                BufferedImage result = Transform.mirror(
                        inputImagePanel.image,
                        Orientation.fromString(optionsSelector.choices.getSelectedItem())
                );
                outputImagePanel.setImage(result);
            });
            optionsSelector.setVisible(true);
        }
    }//GEN-LAST:event_mirrorMenuItemActionPerformed

    private void grayscaleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayscaleMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            SelectOptions optionsSelector = new SelectOptions("Grayscale");
            
            optionsSelector.rPanel.setVisible(true);
            optionsSelector.gPanel.setVisible(true);
            optionsSelector.bPanel.setVisible(true);

            optionsSelector.addEventListener((java.awt.event.ActionEvent evt1) -> {
                BufferedImage result = Filter.grayScale(
                        inputImagePanel.image,
                        optionsSelector.getPercentageValue(optionsSelector.rSlider),
                        optionsSelector.getPercentageValue(optionsSelector.gSlider),
                        optionsSelector.getPercentageValue(optionsSelector.bSlider)
                );
                outputImagePanel.setImage(result);
            });
            optionsSelector.setVisible(true);
        }
    }//GEN-LAST:event_grayscaleMenuItemActionPerformed

    private void lowPassMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowPassMenuItemActionPerformed
         if (inputImagePanel.image != null) {
            BufferedImage result = Filter.GaussianLowPass(inputImagePanel.image);
            outputImagePanel.setImage(result);
        }
    }//GEN-LAST:event_lowPassMenuItemActionPerformed

    private void increaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            BufferedImage result = Transform.augment(inputImagePanel.image, 2);
            outputImagePanel.setImage(result);
        }
    }//GEN-LAST:event_increaseMenuItemActionPerformed

    private void highPassMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highPassMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            SelectOptions optionsSelector = new SelectOptions("Passa Alta");

            optionsSelector.addEventListener((java.awt.event.ActionEvent evt1) -> {
                BufferedImage result = Filter.RobertsHighPass(
                        inputImagePanel.image,
                        optionsSelector.rSlider.getValue()
                );
                outputImagePanel.setImage(result);
            });

            optionsSelector.xLabel.setText("Limite da borda");
            optionsSelector.xSlider.setMinimum(5);
            optionsSelector.xSlider.setMaximum(100);
            optionsSelector.xSlider.setValue(20);
            optionsSelector.xPanel.setVisible(true);
            optionsSelector.setVisible(true);
        }
    }//GEN-LAST:event_highPassMenuItemActionPerformed

    private void thresholdMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            SelectOptions optionsSelector = new SelectOptions("Threshold");
            optionsSelector.addEventListener((java.awt.event.ActionEvent evt1) -> {
                BufferedImage result = Filter.RobertsHighPass(
                        inputImagePanel.image,
                        optionsSelector.rSlider.getValue()
                );
                outputImagePanel.setImage(result);
            });

            optionsSelector.xLabel.setText("Limite da borda");
            optionsSelector.xSlider.setMinimum(100);
            optionsSelector.xSlider.setMaximum(300);
            optionsSelector.xSlider.setValue(200);
            optionsSelector.xPanel.setVisible(true);

            optionsSelector.setVisible(true);
        }
    }//GEN-LAST:event_thresholdMenuItemActionPerformed



        private void dilatationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dilatationMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            BufferedImage result = Mathematic_Erosion.dilation(inputImagePanel.image);
            outputImagePanel.setImage(result);
        }
    }//GEN-LAST:event_dilatationMenuItemActionPerformed

    private void erosionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erosionMenuItemActionPerformed
        if (inputImagePanel.image != null) {
            BufferedImage result = Mathematic_Erosion.erosion(inputImagePanel.image, 100);
            outputImagePanel.setImage(result);
        }
    }//GEN-LAST:event_erosionMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutItem;
    private javax.swing.JMenu GeometricTransformationMenu;
    private javax.swing.JMenuItem challengeMenuItem;
    private javax.swing.JMenu characteristicsExtractionMenu;
    private javax.swing.JMenuItem decreaseMenuItem;
    private javax.swing.JMenuItem dilatationMenuItem;
    private javax.swing.JMenuItem enclosingMenuItem;
    private javax.swing.JMenuItem erosionMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu filtersMenu;
    private javax.swing.JMenuItem grayscaleMenuItem;
    private javax.swing.JMenuItem highPassMenuItem;
    private javax.swing.JMenuItem increaseMenuItem;
    private com.mycompany.corel_draw.components.ImagePanel inputImagePanel;
    private javax.swing.JLabel inputImageSizeLabel;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JMenuItem lowPassMenuItem;
    private javax.swing.JMenu mathMorfologyMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mirrorMenuItem;
    private javax.swing.JMenuItem openImageItem;
    private javax.swing.JMenuItem openingMenuItem;
    private com.mycompany.corel_draw.components.ImagePanel outputImagePanel;
    private javax.swing.JLabel outputImageSizeLabel;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JMenuItem rotateMenuItem;
    private javax.swing.JMenuItem saveImageItem;
    private javax.swing.JMenuItem thresholdMenuItem;
    private javax.swing.JMenuItem translateMenuItem;
    // End of variables declaration//GEN-END:variables

}
